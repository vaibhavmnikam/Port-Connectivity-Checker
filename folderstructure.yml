---
- name: ACL setup for single user and folder (with logging)
  hosts: all
  become: yes

  pre_tasks:
    - name: Review the details 
      pause:
        prompt: |
          ⚠️ WARNING:
            Run this playbook only for single user and last directory permission rwx.
            This playbook will:
              - Create a {{ client_user }} ser (if missing)
              - Apply ACLs on the specified {{ path_1 }} path
              - Log actions to a CSV file (including user password if created)
          Press Enter to continue or Ctrl+C to abort.

  vars_prompt:
    - name: client_user
      prompt: "Enter the username to grant access to (e.g. TAurusprod)"
      private: no

    - name: path_1
      prompt: "Enter the full path for the folder (e.g. /folders/path/2025)"
      private: no

  vars:
    csv_log_path: "{{ playbook_dir }}/{{ client_user }}acl_changes_log.csv"

  tasks:
    - name: Get system hostname
      shell: hostname
      register: actual_hostname
      changed_when: false

    - name: Get primary IP address
      shell: "hostname -I | awk '{print $1}'"
      register: primary_ip
      changed_when: false

    - name: Ensure log file exists
      delegate_to: localhost
      file:
        path: "{{ csv_log_path }}"
        state: touch
        mode: '0777'

    - name: Insert CSV header if empty
      delegate_to: localhost
      shell: |
        if [ ! -s "{{ csv_log_path }}" ]; then
          echo "hostname,ip,action,entity,details" > "{{ csv_log_path }}"
        fi
      args:
        executable: /bin/bash

    - name: Check if client_user exists
      shell: id "{{ client_user }}"
      register: client_user_check
      ignore_errors: yes
      when: client_user | length > 0

    - name: Ask if want to create client_user if not exists
      pause:
        prompt: "The user '{{ client_user }}' does not exist. Do you want to create it? (Yes/No)"
      register: create_client_user_choice
      when:
        - client_user | length > 0
        - client_user_check.rc != 0

    - name: Fail if client_user creation declined
      fail:
        msg: "User creation declined for '{{ client_user }}'. Exiting."
      when:
        - client_user_check.rc != 0
        - create_client_user_choice.user_input | lower not in ['yes', 'y']

    - name: Prompt for strong password
      pause:
        prompt: "Enter a strong password (min 12 chars with upper, lower, digit, symbol):"
        echo: yes
      register: client_user_password
      when:
        - client_user_check.rc != 0
        - create_client_user_choice.user_input | lower in ['yes', 'y']

    - name: Validate password strength
      assert:
        that:
          - client_user_password.user_input is match("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]).{12,}$")
        fail_msg: "Password doesn't meet complexity requirements."
      when:
        - client_user_check.rc != 0
        - create_client_user_choice.user_input | lower in ['yes', 'y']

    - name: Create the client_user
      user:
        name: "{{ client_user }}"
        password: "{{ client_user_password.user_input | password_hash('sha512') }}"
        shell: /bin/bash
      when:
        - client_user_check.rc != 0
        - create_client_user_choice.user_input | lower in ['yes', 'y']

    - name: Log user creation
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},user_create,{{ client_user }},Created with secure password"
      when:
        - client_user_check.rc != 0
        - create_client_user_choice.user_input | lower in ['yes', 'y']

    - name: Log user password
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},user_password,{{ client_user }},{{ client_user_password.user_input }}"
      when:
        - client_user_check.rc != 0
        - create_client_user_choice.user_input | lower in ['yes', 'y']

    - name: Create folder if missing
      file:
        path: "{{ path_1 }}"
        state: directory
        mode: '775'
        owner: jon
        group: jon

    - name: Log directory creation
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},directory_create,{{ path_1 }},0775 created"

    - name: Split path into components
      set_fact:
        path_parts: "{{ path_1.rstrip('/').split('/') | reject('equalto', '') | list }}"

    - name: Build list of parent paths
      set_fact:
        parent_paths: "{{ parent_paths | default([]) + ['/' + (path_parts[0:idx + 1] | join('/'))] }}"
      loop: "{{ range(0, path_parts | length - 1) | list }}"
      loop_control:
        index_var: idx

    - name: Set only x permission on parent paths {{ client_user }}
      shell: setfacl -m  u:{{ client_user }}:x {{ item }}
      loop: "{{ parent_paths }}"
      ignore_errors: yes

    - name: Log parent path ACLs
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},acl_set,{{ item }},x for user {{ client_user }}"
      loop: "{{ parent_paths }}"
      when: parent_paths | length > 0

    - name: Set only x on root / {{ client_user }}
      shell: setfacl -d -m u:{{ client_user }}:x /

    - name: Log root ACL
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},acl_set,/,x for user {{ client_user }}"

    - name: Set rwx on target folder
      shell: setfacl -d -R -m u:{{ client_user }}:rwx {{ path_1 }}

    - name: Log ACL on final folder
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},acl_set,{{ path_1 }},rwx for user {{ client_user }}"

    - name: Set `rwx` on target folder for inhouse user 
      shell: setfacl -R -d -m u:inhouse:rw {{ path_1 }}
      ignore_errors: yes

    - name: Log ACL on final folder
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},acl_set,{{ path_1 }},rw for user inhouse"
      ignore_errors: yes

    - name: Set `rwx` on target folder for inhouse user
      shell: setfacl -R -d -m o::rx {{ path_1 }}

    - name: Log ACL on final folder
      delegate_to: localhost
      lineinfile:
        path: "{{ csv_log_path }}"
        line: "{{ actual_hostname.stdout }},{{ primary_ip.stdout }},acl_set,{{ path_1 }},rw for other"
############################################
    - name: Ensure ACLscript.sh exists and is executable
      ansible.builtin.file:
        path: /root/maintenance/ACLscript.sh
        state: touch
        mode: '0755'

    - name: Build dynamic ACL lines for parent paths
      set_fact:
        acl_parent_lines: "{{ acl_parent_lines | default([]) + ['setfacl -m u:' + client_user + ':x ' + item] }}"
      loop: "{{ parent_paths }}"

    - name: Append ACL block (static + dynamic) to ACLscript.sh
      ansible.builtin.blockinfile:
        path: /root/maintenance/ACLscript.sh
        create: yes
        mode: '0755'
        marker: "# {mark} adding  {{ client_user }} acl in script"
        block: |
          setfacl -d -R -m u:{{ client_user }}:rwx {{ path_1 }}
          setfacl -d -m u:{{ client_user }}:x /
          setfacl -R -d -m o::rx {{ path_1 }}
          {% for line in acl_parent_lines %}
          {{ line }}
          {% endfor %}
############################################          
    - name: Display completion
      debug:
        msg: "ACLs applied to {{ path_1 }} for user {{ client_user }}. Log saved at {{ csv_log_path }}"

